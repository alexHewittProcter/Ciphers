import java.util.ArrayList;public class VigenereCipher extends Cipher {    String key = "";    double[] freqAnalysisEnglishAlphabet = new double[26];    public VigenereCipher(String sourceFile, String targetFile, String key) {        this.key = key;        this.sourceFile = sourceFile;        this.targetFile = targetFile;        readSourceFile();        decrypt();        writeTargetFile();    }    public VigenereCipher(String sourceFile, String targetFile) {        this.sourceFile = sourceFile;        this.targetFile = targetFile;        //Add frequency analysis data for alphabet        freqAnalysisEnglishAlphabet[0] = 8.167/100;        freqAnalysisEnglishAlphabet[1] = 1.492/100;        freqAnalysisEnglishAlphabet[2] = 2.782/100;        freqAnalysisEnglishAlphabet[3] = 4.253/100;        freqAnalysisEnglishAlphabet[4] = 12.702/100;        freqAnalysisEnglishAlphabet[5] = 2.228/100;        freqAnalysisEnglishAlphabet[6] = 2.015/100;        freqAnalysisEnglishAlphabet[7] = 6.094/100;        freqAnalysisEnglishAlphabet[8] = 6.996/100;        freqAnalysisEnglishAlphabet[9] = 0.153/100;        freqAnalysisEnglishAlphabet[10] = 0.772/100;        freqAnalysisEnglishAlphabet[11] = 4.025/100;        freqAnalysisEnglishAlphabet[12] = 2.406/100;        freqAnalysisEnglishAlphabet[13] = 6.749/100;        freqAnalysisEnglishAlphabet[14] = 7.507/100;        freqAnalysisEnglishAlphabet[15] = 1.929/100;        freqAnalysisEnglishAlphabet[16] = 0.095/100;        freqAnalysisEnglishAlphabet[17] = 5.987/100;        freqAnalysisEnglishAlphabet[18] = 6.327/100;        freqAnalysisEnglishAlphabet[19] = 9.056/100;        freqAnalysisEnglishAlphabet[20] = 2.758/100;        freqAnalysisEnglishAlphabet[21] = 0.978/100;        freqAnalysisEnglishAlphabet[22] = 2.360/100;        freqAnalysisEnglishAlphabet[23] = 0.150/100;        freqAnalysisEnglishAlphabet[24] = 1.974/100;        freqAnalysisEnglishAlphabet[25] = 0.074/100;        readSourceFile();        if(key == "") {            findKey();        } else {            decrypt();        }        writeTargetFile();    }    public int findLength() {        System.out.println();        int length = 0;        String[] sourceLetters = sourceString.split("");        //Creates an array to store all the letter matches        int[] matches = new int[sourceLetters.length];        //Creates an array of all the different numbers of matches        ArrayList<Integer> matchNumbers = new ArrayList<Integer>();        //Creates a shift digit that will be changed after every loop starting with shift 1        int shift = 1;        //Variable for amount of matches in shift        int localMatches = 0;        //Creates a loop that creates as many shifts as letters in cipher        for(int i = 0; i < sourceLetters.length; i++) {            localMatches = 0;            /*System.out.println(sourceString);            for(int space = 0; space < shift;space++) {                System.out.print(" ");            }            System.out.println(sourceString);*/            for(int j =0; j + shift < sourceLetters.length; j++) {                if(sourceLetters[j + shift].equals(sourceLetters[j])) {                    //System.out.println(sourceLetters[j + shift]);                    //System.out.println(sourceLetters[j]);                    localMatches++;                }            }            //System.out.println(localMatches);            matches[i] = localMatches;            boolean localMatchInArray = false;            for(int z = 0; z < matchNumbers.size();z++) {                if (matchNumbers.get(z) == localMatches) {                    localMatchInArray = true;                }            }            if(!localMatchInArray) {                matchNumbers.add(localMatches);            }            shift++;        }        //Find the highest numbers        int highestNumber = 0;        for(int i =0; i < matchNumbers.size(); i++) {            //System.out.println(matchNumbers.get(i));            if(matchNumbers.get(i) > highestNumber) {                highestNumber = matchNumbers.get(i);            }        }        //System.out.println(highestNumber);        //Find the length between high numbers        boolean lengthBegin = false;        boolean lengthFound = false;        for(int i =0; i < matches.length;i++) {            if(!lengthFound) {                //System.out.println(((matches[i]) * 100) + " " + (highestNumber) + " " + (((matches[i]) * 100)/(highestNumber )));                if (((matches[i]) * 100) / (highestNumber) > 62) {                    if (lengthBegin) {                        //System.out.println("Length ended " + matches[i]);                        lengthFound = true;                        lengthBegin = false;                    } else {                        //System.out.println("Length begun " + matches[i]);                        lengthBegin = true;                    }                }                if (lengthBegin) {                    length++;                }            }        }        System.out.println(length);        return length;    }    public void findKey() {        int keyLength = findLength();        //Split the source letters into words of length of the key        String[] sourceLetters = sourceString.split("");        int wordLength = (int) Math.ceil(sourceLetters.length/keyLength);        //System.out.println(keyLength);        //System.out.println(sourceLetters.length);        //System.out.println(wordLength);        String[] words = new String[wordLength];        String word = "";        for(int i =0; i < wordLength;i++) {            word = "";            for(int j =0; j < keyLength;j++) {                //System.out.println((i*6) + " " + j +" " + ((i*6) + j));                word = word + sourceLetters[(i*keyLength) + j];            }            //System.out.println(word);            words[i] = word;        }        //Do frequency analysis on each letter in each word, collecting for each position in the word        //Shift and multiplication of the letters with the frequency analysis of the english alphabet        //The largest multiplication will yield the shift        double[] positionFreqAnalysis = new double[26];        int highestShift = 0;        double highestMultiplicationNumber = 0;        double multiplicationNumber = 0;        for(int i =0;i<keyLength;i++) {            for(int j = 0; j < wordLength;j++) {                word = words[j];                positionFreqAnalysis[findPosition(word.substring(i,i+1))]++;            }            //Change all frequency analysis to percentage            for(int j =0; j < 26;j++) {                positionFreqAnalysis[j] = positionFreqAnalysis[j]/wordLength;                //System.out.println(positionFreqAnalysis[j]);            }            //Complete shift multiplication for the entire alphabet            for(int j=0; j < 26;j++) {                multiplicationNumber = 0;                for(int k =0;k < 26;k++) {                    //System.out.println(k + " " + (26+k+j)%26);                    multiplicationNumber = multiplicationNumber + (freqAnalysisEnglishAlphabet[k] * positionFreqAnalysis[(26+k+j)%26]);                }                //System.out.println(multiplicationNumber + " " + j);                if(multiplicationNumber > highestMultiplicationNumber) {                    highestShift = j;                    highestMultiplicationNumber = multiplicationNumber;                    //System.out.println(highestShift + " " + highestMultiplicationNumber);                }            }            //System.out.println("Highest shift is " + highestShift + " " + alphabet[highestShift] + "\n");            key += alphabet[highestShift];            highestShift =0;            multiplicationNumber =0;            highestMultiplicationNumber = 0;        }        //System.out.println(key);        decrypt();    }    @Override    public void decrypt() {        String[] keySplit = key.split("");        String[] sourceLetters = sourceString.split("");        sourceString = "";        //Sets the length that will be created        int length = 0;        if(sourceLetters.length < 30) {            length = sourceLetters.length;        } else {            length = 30;        }        for(int i =0; i< length;i++) {            //Finds the key letter            String keyLetter = keySplit[i%keySplit.length];            //System.out.println(keyLetter);            //Finds the key letter position            int keyLetterPosition = findPosition(keyLetter);            //System.out.println(keyLetterPosition);            //Finds the letter to be added to the sourceString by minusing the keyLetterPosition from the cipher letters position            int letterShift = (findPosition(sourceLetters[i]) - keyLetterPosition)+26;            sourceString = sourceString + alphabet[letterShift%26];        }    }}